'use client'
import React, { useState, useEffect } from 'react'
import { MapContainer, TileLayer, Polygon, Circle } from 'react-leaflet'

import 'leaflet/dist/leaflet.css';
import { testData } from "./data";


import { FlyForbidden } from '@/lib/data/FlyForbidden';
import { FlightWithPermission } from '@/lib/data/FlyWithPremision';
import { DangerAreaCirles } from '@/lib/data/DangerAreaCircles';
import { DangerAreas } from '@/lib/data/DangerArea';
import { CautionArea } from '@/lib/data/CautionArea';

function CafesMapCm() {
    const [coordinates, setCoordinates] = useState([]);


    useEffect(() => {
        if (!!testData) {
            setCoordinates(testData.map((row) => [row[1], row[0]]));
        }
    }, [testData]);


    return (
        <MapContainer bounds={coordinates} className='h-full' center={[35.7000, 51.4167]} zoom={4} scrollWheelZoom={true}>
            <TileLayer
                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            />
            {/* <Polygon
                bounds={coordinates}
                color={"purple"}
                boundsOptions={{ padding: [1, 1] }}
                positions={coordinates} /> */}


            {FlyForbidden.map((circle, index) => (
                <Circle
                    key={index}
                    center={circle.center}
                    radius={circle.radius}
                    pathOptions={circle.options}
                />
            ))}

            {FlightWithPermission.map((circle, index) => (
                <Circle
                    key={index}
                    center={circle.center}
                    radius={circle.radius}
                    pathOptions={circle.options}
                />
            ))}

            {DangerAreaCirles.map((circle, index) => (
                <Circle
                    key={index}
                    center={circle.center}
                    radius={circle.radius}
                    pathOptions={circle.options}
                />
            ))}

            {DangerAreas.map((area, index) => (
                <Polygon
                    key={index}
                    positions={area.polygon}
                    pathOptions={area.options}
                />
            ))}

            {CautionArea.map((area, index) => (
                <Polygon
                    key={index}
                    positions={area.polygon}
                    pathOptions={area.options}
                />
            ))}

        </MapContainer>
    )
}

export default CafesMapCm